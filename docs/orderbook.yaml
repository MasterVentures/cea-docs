asyncapi: 2.0.0
info:
  title: CEA Orderbook API
  version: '1.0.0'
defaultContentType: "application/json"
components:
  schemas:
    equi:
      type: object
      properties:
        price:
          type: string
          description: price of bid or ask
          minLength: 1
          example: "1400.00"
        qty:
          type: integer
          description: total bid or ask for this price
          example: 2300

    orderbook:
      required:
        -  symbol
        -  bids
        -  asks
      type: object
      properties:
        symbol:
          type: string
          minLength: 6
          description: pair symbol
          example: "ETHBTC"
        bids:
          type: array
          items:
            $ref: "#/components/schemas/equi"
        asks:
          type: array
          items:
            $ref: "#/components/schemas/equi"

    requestResponseError:
      type: object
      properties:
        prompt:
          type: string
          description: "original message submited to channel"
          example: "{asks: '',bids: '', symbol: ''}"
        reason:
          type: string
          description: "description of error"
          example: "field symbol can't be blank"

channels:
  maker/orderbook/set:
    publish:
      summary: Exchanges can use this channel to stream symbols orderbook
      message:
        name: "orderbook"
        title: "Orderbook"
        summary: "Current asks and bids for the specified symbol"
        payload:
          $ref: "#/components/schemas/orderbook"

    subscribe:
      summary: When there are errors in the Orderbook message, this channel will return an error
      message:
        name: "orderbook error"
        title: "Orderbook Error"
        summary: "When something's wrong with the Orderbook message"
        payload:
          type: object
          properties:
            failure:
              type: string
              description: "type of error been throw"
              enum:
                - "Malformed Message"
                - "Server error"
            err:
              type: string
              description: "posible cause of the error"
              example: "Validation error, field 'symbol' is required"

  taker/orderbook/get:
    publish:
      summary: "Start a WebSocket connection used by the exchange to receive aggregated orderbook for the specified symbol"
      message:
        name: "orderbook response"
        title: "Orderbook Reponse"
        summary: "Aggregated orderbook for a symbol"
        payload:
          type: object
          required:
            -  symbol
            -  depth
            -  subscriptionType
          properties:
            symbol:
              type: string
              minLength: 6
              description: pair symbol
              example: "ETHBTC"
            depth:
              type: integer
              minimum: 0
              example: 6
              description: order book depth, a depth of 0 means full book
            subscriptionType:
              type: integer
              description: >
                1 - To subscribe to aggregated orderbook for the specified symbol.
                2 - To unsubscribe or request once
              enum:
                -  1
                -  2
    subscribe:
      message:
        name: "aggregated orderbook"
        title: "Aggregater Orderbook"
        summary: "Aggregated result for the specified symbol"
        payload:
          type: object
          properties:
            responseType:
              type: integer
              description: >
                1 - Orderbook update.
                2 - Request error.
              enum:
                -  1
                -  2
            err:
              description: "this will be null in case there are no error"
              oneOf:
                - $ref: "#/components/schemas/requestResponseError"
                - type: "null"
            book:
              $ref: "#/components/schemas/orderbook"

